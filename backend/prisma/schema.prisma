generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  username        String        @unique
  email           String?       @unique
  password        String?
  fullName        String
  imageUrl        String?
  availability    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  skills          Skill[]
  interests       Interest[]
  groups_created  CodeGroup[]   @relation("GroupsCreated")
  groups_added_to GroupMember[] @relation("GroupsAddedTo")
  files_created   File[]        @relation("UserFiles")
}

model CodeGroup {
  id                     Int           @id @default(autoincrement())
  groupName              String
  imgUrl                 String?
  preferred_availability String?
  category               Interest[]
  preferred_skills       Skill[]
  creatorId              Int
  createdAt              DateTime      @default(now())
  creator                User          @relation("GroupsCreated", fields: [creatorId], references: [id])
  members                GroupMember[] @relation("GroupMembers")
  files                  File[]        @relation("GroupFiles")
}

model GroupMember {
  id        Int       @id @default(autoincrement())
  groupId   Int
  userId    Int
  addedById Int
  addedAt   DateTime  @default(now())
  group     CodeGroup @relation("GroupMembers", fields: [groupId], references: [id])
  user      User      @relation("GroupsAddedTo", fields: [userId], references: [id])

  @@unique([groupId, userId])
}

model File {
  id            Int       @id @default(autoincrement())
  fileName      String
  fileContent   String?
  creatorId     Int
  groupId       Int
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime  @updatedAt
  creator       User      @relation("UserFiles", fields: [creatorId], references: [id])
  codeGroup     CodeGroup @relation("GroupFiles", fields: [groupId], references: [id])
}

model Skill {
  id          Int        @id @default(autoincrement())
  skill       String
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  CodeGroup   CodeGroup? @relation(fields: [codeGroupId], references: [id])
  codeGroupId Int?
}

model Interest {
  id          Int        @id @default(autoincrement())
  Interest    String
  User        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  CodeGroup   CodeGroup? @relation(fields: [codeGroupId], references: [id])
  codeGroupId Int?
}

model Notification {
  id         Int      @id @default(autoincrement())
  message    String
  category   String
  isRead     Boolean  @default(false)
  isOffline  Boolean  @default(false)
  groupId    Int?
  fileId     Int?
  senderId   Int?
  receiverId Int
  createdAt  DateTime @default(now())
}
